{
  "name": "Jsloader",
  "tagline": "1.0.0",
  "body": "# Welcome to JSLoader\r\n\r\nThis is a js-architecture. It requires jQuery and RequireJS.\r\nAdvantages:\r\n - Abstract Code\r\n - All dependencies in 1 file\r\n - Easy usage\r\n\r\n## Structure\r\n* scripts/\r\n  * app/\r\n    * extensions/\r\n      * lib/\r\n    * appMain.js\r\n    * extensionLoader.js\r\n  * lib/\r\n    * jquery.js\r\n    * require.js\r\n  * main.js\r\n\r\n### scripts/lib\r\nHere are all third-party js-libraries.\r\n\r\n### scripts/app/extensions\r\nYou store your executables here.\r\n\r\n### scripts/app/extensions/lib\r\nYou store your own libraries here.\r\n\r\n### main.js\r\nHere is the requireJS Configuration. It's already preconfigured for the basic functionality.\r\nJust change the baseUrl to your needs. That's it.\r\n\r\n### appMain.js\r\nHere goes the code you always need.\r\n\r\n### extensionLoader.js\r\nHere is where the \"magic\" comes from. Partially.  \r\n```javascript\r\nextensionDependecies = {\r\n    \"#main\": {  \r\n        \"extensions\": [\"extensions/test\"],  \r\n        \"callback\": function(){}  \r\n    },\r\n    ...\r\n}\r\n```  \r\nIn the extensionDependecies-Object, just add a markup-selector on which your js-extension depends.\r\nThe Markup-Selector stores an object containing an extensions-array and a callback-function.\r\nWrite all extensions which are directly related to the markup-selector into the extensions array.\r\nThe Callback-function will be executed after loading the extension. You can write a small callback here, but try not to overload the callback. It's not even required.\r\n\r\n### extensions/test.js\r\n```javascript\r\ndefine([\"jquery\", \"extensions/lib/Module\"], function(jQuery, Module) {\r\n    var $j = jQuery.noConflict();\r\n\r\n    $j(document).ready(function() {\r\n        var Demo = new Module();\r\n        Demo.doStuff();\r\n    });\r\n});\r\n```  \r\nThis file stores the code that depends on \"#main\".\r\nIn the first line, we define our dependencies for this file.\r\nIn this case, it's jquery and extensions/lib/Module.\r\nThose files are loaded before executing the rest of this file. Thanks to requireJS.\r\n\r\n### extensions/lib/Module.js\r\n```javascript\r\ndefine([], function() {\r\n    return (function(){\r\n        var _priv = null;\r\n\r\n        function Module() {\r\n        }\r\n        \r\n        Module.prototype = {\r\n        }\r\n\r\n        return Module;\r\n    })();\r\n});\r\n```\r\nThis is how you would use the JS-Modulepattern together with this architecture.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}